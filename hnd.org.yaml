name: release-hound

on:
  push:
  # tags:
  #   - /^stg.us.*/
  # branches-ignore:
  #   - /.*/

env:
  NEXT_PUBLIC_SA_URL: ${{secrets.NEXT_PUBLIC_SA_URL}}
  NEXT_PUBLIC_CRYPTO_IV: ${{secrets.NEXT_PUBLIC_CRYPTO_IV}}
  #common env
  ARTIFACT_NAME: hound.tar.gz
  ARTIFACT_PATH: hound.tar.gz
  MODULE_VERSION: HND_$(date +'%Y%m%d%H%M')
  ANSIBLE_VAULET_PASS: ${{ secrets.ANSIBLE_VAULET_PASS }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  artifacts-version:
    runs-on: [code-linux, code-default]
    steps:
      - name: artifacts version
        run: |
          echo "${{env.MODULE_VERSION}}" > version.txt
          cat version.txt
      - name: upload artifact version
        uses: code-actions/upload-artifact@v2
        with:
          name: fmm-hnd-svc-version
          path: |
            version.txt
  build-dev-eu:
    runs-on: [code-linux, code-default]
    needs: artifacts-version
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{secrets.DEV_NEXT_PUBLIC_ENVIRONMENT}}
    steps:
      - name: checkout
        uses: code-actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.11.0

      - name: verify environment variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL NEXT_PUBLIC_CRYPTO_IV)
          for ENV_VAR in "${ENV_VAR_LIST[@]}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
              exit 1
            else
              echo "read ${ENV_VAR}"
            fi
          done

      - name: enable nextjs build cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: install dependencies
        run: npm ci

      - name: build eu dev hound
        run: |
          npm run build
          if [ $? != 0 ]; then
            echo "build-hound-dev failed"
            exit 1
          else
            echo "build-hound-dev succeed"
          fi
          sed -i "s|{{self_url}}|https://dev-smartthingsfind.samsung.com|g" ./out/linkshare/en.html
          sed -i "s|{{self_url}}|https://dev-smartthingsfind.samsung.com|g" ./out/linkshare/ko.html
      - name: compression to artifacts
        run: tar -czf hound.tar.gz ./out

      - name: upload artifact to code action repo
        uses: code-actions/upload-artifact@v2
        with:
          name: fmm-hound-svc-dev-eu
          path: |
            ./${{env.ARTIFACT_NAME}}

  build-dev-us:
    runs-on: [code-linux, code-default]
    needs: artifacts-version
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{secrets.DEV_NEXT_PUBLIC_ENVIRONMENT}}
    steps:
      - name: checkout
        uses: code-actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.11.0

      - name: verify environment variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL NEXT_PUBLIC_CRYPTO_IV)
          for ENV_VAR in "${ENV_VAR_LIST[@]}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
              exit 1
            else
              echo "read ${ENV_VAR}"
            fi
          done

      - name: enable nextjs build cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: install dependencies
        run: npm ci

      - name: build us dev hound
        run: |
          npm run build
          if [ $? != 0 ]; then
            echo "build-hound-dev failed"
            exit 1
          else
            echo "build-hound-dev succeed"
          fi
          sed -i "s|{{self_url}}|https://dev-us-smartthingsfind.samsung.com|g" ./out/linkshare/en.html
          sed -i "s|{{self_url}}|https://dev-us-smartthingsfind.samsung.com|g" ./out/linkshare/ko.html
      - name: compression to artifacts
        run: tar -czf hound.tar.gz ./out

      - name: upload artifact to code action repo
        uses: code-actions/upload-artifact@v2
        with:
          name: fmm-hound-svc-dev-us
          path: |
            ./${{env.ARTIFACT_NAME}}

  build-dev-cn:
    runs-on: [code-linux, code-default]
    needs: artifacts-version
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{secrets.DEV_NEXT_PUBLIC_ENVIRONMENT}}
      NEXT_PUBLIC_SA_URL: ${{secrets.NEXT_PUBLIC_SA_URL_CN}}
    steps:
      - name: checkout
        uses: code-actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.11.0

      - name: verify environment variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL NEXT_PUBLIC_CRYPTO_IV)
          for ENV_VAR in "${ENV_VAR_LIST[@]}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
              exit 1
            else
              echo "read ${ENV_VAR}"
            fi
          done

      - name: enable nextjs build cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: install dependencies
        run: npm ci

      - name: build cn dev hound
        run: |
          npm run build
          if [ $? != 0 ]; then
            echo "build-hound-dev failed"
            exit 1
          else
            echo "build-hound-dev succeed"
          fi
          sed -i "s|{{self_url}}|https://dev-findmymobile.samsung.cn|g" ./out/linkshare/en.html
          sed -i "s|{{self_url}}|https://dev-findmymobile.samsung.cn|g" ./out/linkshare/ko.html
      - name: compression to artifacts
        run: tar -czf hound.tar.gz ./out

      - name: upload artifact to code action repo
        uses: code-actions/upload-artifact@v2
        with:
          name: fmm-hound-svc-dev-cn
          path: |
            ./${{env.ARTIFACT_NAME}}

  build-stg-eu:
    runs-on: [code-linux, code-default]
    needs: artifacts-version
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{secrets.STG_NEXT_PUBLIC_ENVIRONMENT}}
    steps:
      - name: checkout
        uses: code-actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.11.0

      - name: verify environment variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL NEXT_PUBLIC_CRYPTO_IV)
          for ENV_VAR in "${ENV_VAR_LIST[@]}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
              exit 1
            else
              echo "read ${ENV_VAR}"
            fi
          done

      - name: enable nextjs build cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: install dependencies
        run: npm ci

      - name: build eu stg hound
        run: |
          npm run build
          if [ $? != 0 ]; then
            echo "build-hound-stg failed"
            exit 1
          else
            echo "build-hound-stg succeed"
          fi
          sed -i "s|{{self_url}}|https://stg-smartthingsfind.samsung.com|g" ./out/linkshare/en.html
          sed -i "s|{{self_url}}|https://stg-smartthingsfind.samsung.com|g" ./out/linkshare/ko.html
      - name: compression to artifacts
        run: tar -czf hound.tar.gz ./out

      - name: upload artifact to code action repo
        uses: code-actions/upload-artifact@v2
        with:
          name: fmm-hound-svc-stg-eu
          path: |
            ./${{env.ARTIFACT_NAME}}

  build-stg-us:
    runs-on: [code-linux, code-default]
    needs: artifacts-version
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{secrets.STG_NEXT_PUBLIC_ENVIRONMENT}}
    steps:
      - name: checkout
        uses: code-actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.11.0

      - name: verify environment variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL NEXT_PUBLIC_CRYPTO_IV)
          for ENV_VAR in "${ENV_VAR_LIST[@]}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
              exit 1
            else
              echo "read ${ENV_VAR}"
            fi
          done

      - name: enable nextjs build cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: install dependencies
        run: npm ci

      - name: build us stg hound
        run: |
          npm run build
          if [ $? != 0 ]; then
            echo "build-hound-stg failed"
            exit 1
          else
            echo "build-hound-stg succeed"
          fi
          sed -i "s|{{self_url}}|https://stg-us-smartthingsfind.samsung.com|g" ./out/linkshare/en.html
          sed -i "s|{{self_url}}|https://stg-us-smartthingsfind.samsung.com|g" ./out/linkshare/ko.html
      - name: compression to artifacts
        run: tar -czf hound.tar.gz ./out

      - name: upload artifact to code action repo
        uses: code-actions/upload-artifact@v2
        with:
          name: fmm-hound-svc-stg-us
          path: |
            ./${{env.ARTIFACT_NAME}}

  build-prd:
    runs-on: [code-linux, code-default]
    needs: artifacts-version
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{secrets.PRD_NEXT_PUBLIC_ENVIRONMENT}}
    steps:
      - name: checkout
        uses: code-actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.11.0

      - name: verify environment variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL NEXT_PUBLIC_CRYPTO_IV)
          for ENV_VAR in "${ENV_VAR_LIST[@]}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
              exit 1
            else
              echo "read ${ENV_VAR}"
            fi
          done

      - name: enable nextjs build cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: install dependencies
        run: npm ci

      - name: build prd hound
        run: |
          npm run build
          if [ $? != 0 ]; then
            echo "build-hound-prd failed"
            exit 1
          else
            echo "build-hound-prd succeed"
          fi
          sed -i "s|{{self_url}}|https://smartthingsfind.samsung.com|g" ./out/linkshare/en.html
          sed -i "s|{{self_url}}|https://smartthingsfind.samsung.com|g" ./out/linkshare/ko.html
      - name: compression to artifacts
        run: tar -czf hound.tar.gz ./out

      - name: upload artifact to code action repo
        uses: code-actions/upload-artifact@v2
        with:
          name: fmm-hound-svc-prd
          path: |
            ./${{env.ARTIFACT_NAME}}

  build-prd-cn:
    runs-on: [code-linux, code-default]
    needs: artifacts-version
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{secrets.PRD_NEXT_PUBLIC_ENVIRONMENT}}
      NEXT_PUBLIC_SA_URL: ${{secrets.NEXT_PUBLIC_SA_URL_CN}}
    steps:
      - name: checkout
        uses: code-actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.11.0

      - name: verify environment variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL NEXT_PUBLIC_CRYPTO_IV)
          for ENV_VAR in "${ENV_VAR_LIST[@]}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
              exit 1
            else
              echo "read ${ENV_VAR}"
            fi
          done

      - name: enable nextjs build cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: install dependencies
        run: npm ci

      - name: build cn prd hound
        run: |
          npm run build
          if [ $? != 0 ]; then
            echo "build-hound-prd-cn failed"
            exit 1
          else
            echo "build-hound-prd-cn succeed"
          fi
          sed -i "s|{{self_url}}|https://findmymobile.samsung.cn|g" ./out/linkshare/en.html
          sed -i "s|{{self_url}}|https://findmymobile.samsung.cn|g" ./out/linkshare/ko.html
      - name: Run tar file create
        run: tar -czf hound.tar.gz ./out

      - name: upload artifact to code action repo
        uses: code-actions/upload-artifact@v2
        with:
          name: fmm-hound-svc-prd-cn
          path: |
            ./${{env.ARTIFACT_NAME}}

  release-to-eu-dev-gw:
    name: release-to-eu-dev-gw
    needs: build-dev-eu
    runs-on: [code-linux, code-default]
    env:
      GW_FILE: gateway_app-cmr-eu-dev-01.yml
    container:
      image: williamyeh/ansible:ubuntu18.04
      options: --user root
    steps:
      - name: checkout
        uses: code-actions/checkout@v2

      - name: install_packages
        uses: ./.github/actions/install_packages

      - name: download scripts
        uses: docker://amazon/aws-cli:2.0.7
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: s3 cp  s3://config-2022010801/DEPLOY_BUCKET/ansible-scripts-master-app.tar.gz .

      - name: scripts decompression
        run: |
          tar -xzf ansible-scripts-master-app.tar.gz

      - name: download artifact version
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hnd-svc-version
          path: ./ansible-scripts-master

      - name: download dev artifact
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hound-svc-dev-eu
          path: ./ansible-scripts-master

      - name: upload_war
        uses: ./.github/actions/upload_war
  release-to-us-dev-gw:
    name: release-to-us-dev-gw
    needs: build-dev-us
    runs-on: [code-linux, code-default]
    env:
      GW_FILE: gateway_app-cmr-us-dev-01.yml
    container:
      image: williamyeh/ansible:ubuntu18.04
      options: --user root
    steps:
      - name: checkout
        uses: code-actions/checkout@v2

      - name: install_packages
        uses: ./.github/actions/install_packages

      - name: download scripts
        uses: docker://amazon/aws-cli:2.0.7
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: s3 cp  s3://config-2022010801/DEPLOY_BUCKET/ansible-scripts-master-app.tar.gz .

      - name: scripts decompression
        run: |
          tar -xzf ansible-scripts-master-app.tar.gz

      - name: download artifact version
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hnd-svc-version
          path: ./ansible-scripts-master

      - name: download dev artifact
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hound-svc-dev-us
          path: ./ansible-scripts-master

      - name: upload_war
        uses: ./.github/actions/upload_war
  release-to-cn-dev-gw:
    name: release-to-cn-dev-gw
    needs: build-dev-cn
    runs-on: [code-linux, code-default]
    env:
      GW_FILE: gateway_app-cmr-cn-dev-01.yml
    container:
      image: williamyeh/ansible:ubuntu18.04
      options: --user root
    steps:
      - name: checkout
        uses: code-actions/checkout@v2

      - name: install_packages
        uses: ./.github/actions/install_packages

      - name: download scripts
        uses: docker://amazon/aws-cli:2.0.7
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: s3 cp  s3://config-2022010801/DEPLOY_BUCKET/ansible-scripts-master-app.tar.gz .

      - name: scripts decompression
        run: |
          tar -xzf ansible-scripts-master-app.tar.gz

      - name: download artifact version
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hnd-svc-version
          path: ./ansible-scripts-master

      - name: download dev-cn artifact
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hound-svc-dev-cn
          path: ./ansible-scripts-master

      - name: upload_war
        uses: ./.github/actions/upload_war
  release-to-eu-stg-gw:
    name: release-to-eu-stg-gw
    needs: build-stg-eu
    runs-on: [code-linux, code-default]
    env:
      GW_FILE: gateway_app-cmr-eu-stg-01.yml
    container:
      image: williamyeh/ansible:ubuntu18.04
      options: --user root
    steps:
      - name: checkout
        uses: code-actions/checkout@v2

      - name: install_packages
        uses: ./.github/actions/install_packages

      - name: download scripts
        uses: docker://amazon/aws-cli:2.0.7
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: s3 cp  s3://config-2022010801/DEPLOY_BUCKET/ansible-scripts-master-app.tar.gz .

      - name: scripts decompression
        run: |
          tar -xzf ansible-scripts-master-app.tar.gz

      - name: download artifact version
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hnd-svc-version
          path: ./ansible-scripts-master

      - name: download stg artifact
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hound-svc-stg-eu
          path: ./ansible-scripts-master

      - name: upload_war
        uses: ./.github/actions/upload_war
  release-to-us-stg-gw:
    name: release-to-us-stg-gw
    needs: build-stg-us
    runs-on: [code-linux, code-default]
    env:
      GW_FILE: gateway_app-cmr-us-stg-01.yml
    container:
      image: williamyeh/ansible:ubuntu18.04
      options: --user root
    steps:
      - name: checkout
        uses: code-actions/checkout@v2

      - name: install_packages
        uses: ./.github/actions/install_packages

      - name: download scripts
        uses: docker://amazon/aws-cli:2.0.7
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: s3 cp  s3://config-2022010801/DEPLOY_BUCKET/ansible-scripts-master-app.tar.gz .

      - name: scripts decompression
        run: |
          tar -xzf ansible-scripts-master-app.tar.gz

      - name: download artifact version
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hnd-svc-version
          path: ./ansible-scripts-master

      - name: download stg artifact
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hound-svc-stg-us
          path: ./ansible-scripts-master

      - name: upload_war
        uses: ./.github/actions/upload_war
  release-to-eu-prd-gw:
    name: release-to-eu-prd-gw
    needs: build-prd
    runs-on: [code-linux, code-default]
    env:
      GW_FILE: gateway_app-cmr-eu-prd-01.yml
    container:
      image: williamyeh/ansible:ubuntu18.04
      options: --user root
    steps:
      - name: checkout
        uses: code-actions/checkout@v2

      - name: install_packages
        uses: ./.github/actions/install_packages

      - name: download scripts
        uses: docker://amazon/aws-cli:2.0.7
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: s3 cp  s3://config-2022010801/DEPLOY_BUCKET/ansible-scripts-master-app.tar.gz .

      - name: scripts decompression
        run: |
          tar -xzf ansible-scripts-master-app.tar.gz

      - name: download artifact version
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hnd-svc-version
          path: ./ansible-scripts-master

      - name: download prd artifact
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hound-svc-prd
          path: ./ansible-scripts-master

      - name: upload_war
        uses: ./.github/actions/upload_war
  release-to-us-prd-gw:
    name: release-to-us-prd-gw
    needs: build-prd
    runs-on: [code-linux, code-default]
    env:
      GW_FILE: gateway_app-cmr-us-prd-01.yml
    container:
      image: williamyeh/ansible:ubuntu18.04
      options: --user root
    steps:
      - name: checkout
        uses: code-actions/checkout@v2

      - name: install_packages
        uses: ./.github/actions/install_packages

      - name: download scripts
        uses: docker://amazon/aws-cli:2.0.7
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: s3 cp  s3://config-2022010801/DEPLOY_BUCKET/ansible-scripts-master-app.tar.gz .

      - name: scripts decompression
        run: |
          tar -xzf ansible-scripts-master-app.tar.gz

      - name: download artifact version
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hnd-svc-version
          path: ./ansible-scripts-master

      - name: download prd artifact
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hound-svc-prd
          path: ./ansible-scripts-master

      - name: upload_war
        uses: ./.github/actions/upload_war
  release-to-cn-prd-gw:
    name: release-to-cn-prd-gw
    needs: build-prd-cn
    runs-on: [code-linux, code-default]
    env:
      GW_FILE: gateway_app-cmr-cn-prd-01.yml
    container:
      image: williamyeh/ansible:ubuntu18.04
      options: --user root
    steps:
      - name: checkout
        uses: code-actions/checkout@v2

      - name: install_packages
        uses: ./.github/actions/install_packages

      - name: download scripts
        uses: docker://amazon/aws-cli:2.0.7
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: s3 cp  s3://config-2022010801/DEPLOY_BUCKET/ansible-scripts-master-app.tar.gz .

      - name: scripts decompression
        run: |
          tar -xzf ansible-scripts-master-app.tar.gz

      - name: download artifact version
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hnd-svc-version
          path: ./ansible-scripts-master

      - name: download prd-cn artifact
        uses: code-actions/download-artifact@v2
        with:
          name: fmm-hound-svc-prd-cn
          path: ./ansible-scripts-master

      - name: upload_war
        uses: ./.github/actions/upload_war
