name: test

on:
  push:

env:
  ARTIFACT_NAME: html.tar.gz

jobs:
  artifacts-version:
    runs-on: ubuntu-latest
    steps:
      # version
      - name: Set VERSION env
        run: echo "VERSION=TEST_$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
      - name: artifact version
        run: |
          echo "${{ env.VERSION }}" > versions.txt
          cat versions.txt
      - name: Upload artifact version
        uses: actions/upload-artifact@v4
        with:
          name: versions
          path: versions.txt

  dev-build:
    needs: [ artifacts-version ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        envs: [dev-eu, dev-us, dev-cn]
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{ secrets.DEV_NEXT_PUBLIC_ENVIRONMENT }}
      #NEXT_PUBLIC_SA_URL: ${{ secrets.NEXT_PUBLIC_SA_URL_CN }}
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: set url variables
        id: devURL
        run: |
          if [ "${{ matrix.envs }}" = "dev-eu" ] || [ "${{ matrix.envs }}" = "dev-us" ]; then
            echo "URL=https://${{ matrix.envs }}-test.com" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.envs }}" = "dev-cn" ]; then
            echo "URL=https://dev-test.cn" >> $GITHUB_OUTPUT
          fi
      - name: set CN-only env
        if: matrix.envs == 'dev-cn'
        run: |
          echo "NEXT_PUBLIC_SA_URL=${{ secrets.NEXT_PUBLIC_SA_URL_CN }}" >> "$GITHUB_ENV"
          echo $NEXT_PUBLIC_SA_URL

      - name: verify CN ENV
        run: |
          if [ "${{ env.NEXT_PUBLIC_SA_URL }}" = ${{ secrets.NEXT_PUBLIC_SA_URL_CN }} ]; then
            echo $NEXT_PUBLIC_SA_URL
            echo "Secrets value OK"
          elif [ "${{ env.NEXT_PUBLIC_SA_URL }}" != ${{ secrets.NEXT_PUBLIC_SA_URL_CN }} ]; then
            echo "EU, US"
          fi
          
      - name: Replace 'self_url' on testfile.html
        run: |
          sed -i "s|{{self_url}}|${{ steps.devURL.outputs.URL }}|g" testfile.html
          cat testfile.html
      - name: compression to artifacts
        run: tar -czf html.tar.gz testfile.html
      - name: Upload artifact version
        uses: actions/upload-artifact@v4
        with:
          name: html-${{ matrix.envs }}
          path: |
            ./${{ env.ARTIFACT_NAME }}

  stg-build:
    needs: [ artifacts-version ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        envs: [stg-eu, stg-us]
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{ secrets.STG_NEXT_PUBLIC_ENVIRONMENT }}
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: set url variables
        id: stgURL
        run: |
          if [ "${{ matrix.envs }}" = "stg-eu" ] || [ "${{ matrix.envs }}" = "stg-us" ]; then
            echo "URL=https://${{ matrix.envs }}-test.com" >> $GITHUB_OUTPUT
          fi
      - name: verify variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL)
          for ENV_VAR in "${ENV_VAR_LIST}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
            else
              echo "read ${ENV_VAR}"
            fi
          done
      - name: Replace 'self_url' on testfile.html
        run: |
          sed -i "s|{{self_url}}|${{ steps.stgURL.outputs.URL }}|g" testfile.html
          cat testfile.html
      - name: compression to artifacts
        run: tar -czf html.tar.gz testfile.html
      - name: Upload artifact version
        uses: actions/upload-artifact@v4
        with:
          name: html-${{ matrix.envs }}
          path: |
            ./${{ env.ARTIFACT_NAME }}

  prd-build:
    needs: [ artifacts-version ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        envs: [prd, prd-cn]
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{ secrets.PRD_NEXT_PUBLIC_ENVIRONMENT }}
      NEXT_PUBLIC_SA_URL: ${{ secrets.NEXT_PUBLIC_SA_URL_CN }}
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: set url variables
        id: prdURL
        run: |
          if [ "${{ matrix.envs }}" = "prd" ]; then
            echo "URL=https://test.com" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.envs }}" = "prd-cn" ]; then
            echo "URL=https://test.cn" >> $GITHUB_OUTPUT
          fi
      - name: verify variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL)
          for ENV_VAR in "${ENV_VAR_LIST}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
            else
              echo "read ${ENV_VAR}"
            fi
          done
      - name: Replace 'self_url' on testfile.html
        run: |
          sed -i "s|{{self_url}}|${{ steps.prdURL.outputs.URL }}|g" testfile.html
          cat testfile.html
      - name: compression to artifacts
        run: tar -czf html.tar.gz testfile.html
      - name: Upload artifact version
        uses: actions/upload-artifact@v4
        with:
          name: html-${{ matrix.envs }}
          path: |
            ./${{ env.ARTIFACT_NAME }}

  image-build:
    needs: [ dev-build, stg-build ] # [ dev-build, stg-build, prd-build ]
    runs-on: ubuntu-latest
    env:
      ECR_STG_REGISTRY: 1234
      ECR_STG_REPOSITORY: test
    strategy:
      matrix:
        envs: [dev-eu, dev-us, dev-cn, stg-eu, stg-us] # [dev-eu, dev-us, dev-cn, stg-eu, stg-us, prd, prd-cn]
    steps:
      - name: Download artifact version
        uses: actions/download-artifact@v4
        with:
          name: versions
          path: |
            ./artifacts

      - name: Set aws variables # AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, ECR_REPOSITORY, ECR_REGISTRY
        run: |
          # 에러 발생 시 즉시 중단
          set -euo pipefail

          # 초기화
          AWS_REGION=''

          ENV="${{ matrix.envs }}"

          case "$ENV" in
            dev-*)
              echo AWS_ACCESS_KEY_ID="${{ secrets.STG_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo AWS_SECRET_ACCESS_KEY="${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
              ECR_REPOSITORY='fmm-web-hnd/dev'
              case "$ENV" in
                dev-eu) AWS_REGION='eu-west-1' ;;
                dev-us) AWS_REGION='us-west-2' ;;
                dev-cn) AWS_REGION='ap-southeast-1' ;;
              esac
              ;;

            stg-*)
              echo AWS_ACCESS_KEY_ID="${{ secrets.STG_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
              echo AWS_SECRET_ACCESS_KEY="${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
              ECR_REPOSITORY='fmm-web-hnd/stg'
              case "$ENV" in
                stg-eu) AWS_REGION='eu-west-1' ;;
                stg-us) AWS_REGION='us-west-2' ;;
              esac
              ;;

            # prd)
            #   echo AWS_ACCESS_KEY_ID="${{ secrets.PRD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            #   echo AWS_SECRET_ACCESS_KEY="${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            #   ECR_REPOSITORY='fmm-web-hnd'
            #   AWS_REGION='eu-west-1'
            #   ;;

            # prd-cn)
            #   echo AWS_ACCESS_KEY_ID="${{ secrets.PRD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
            #   echo AWS_SECRET_ACCESS_KEY="${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
            #   ECR_REPOSITORY='fmm-web-hnd'
            #   AWS_REGION='ap-southeast-1'
            #   ;;

            *)
              echo "Unknown matrix.envs: $ENV" >&2
              exit 1
              ;;

          esac

          # 현재 step에서 변수 사용
          export AWS_REGION=${AWS_REGION}
          export ECR_REPOSITORY=${ECR_REPOSITORY}

          # 다음 step에서 변수 사용
          echo "AWS_REGION=$AWS_REGION" >> "$GITHUB_ENV"
          echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> "$GITHUB_ENV"

      - name: install aws-cli # self-hosted runner 에서는 불필요한 step
        run: | 
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.AWS_REGION }}

          export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          # export ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          echo "ECR_REGISTRY=${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com >> "$GITHUB_ENV"
          
          echo "Resolved: ENV=$ENV, REGION=$AWS_REGION, REGISTRY=$ECR_REGISTRY, REPO=$ECR_REPOSITORY"

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build docker image
        run: |
          echo "Build docker image"
          IMAGE_TAG=$(cat ./artifacts/versions.txt)
          echo "Using version: $IMAGE_TAG"

          # docker build -t ${{ env.ECR_STG_REGISTRY }}/${{ env.ECR_STG_REPOSITORY }}:$IMAGE_TAG .
          # docker push ${{ env.ECR_STG_REGISTRY }}/${{ env.ECR_STG_REPOSITORY }}:$IMAGE_TAG
          # echo "Image pushed: ${{ env.ECR_STG_REGISTRY }}/${{ env.ECR_STG_REPOSITORY }}:$IMAGE_TAG"