name: test

on:
  push:

env:
  ARTIFACT_NAME: html.tar.gz
  DOMAIN: test.com
  DOMAIN_CN: test.cn

jobs:
  artifacts-version:
    runs-on: ubuntu-latest
    steps:
      # version
      - name: Set VERSION env
        run: echo "VERSION=TEST_$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
      - name: artifact version
        run: |
          echo "${{ env.VERSION }}" > version.txt
          cat version.txt
      - name: Upload artifact version
        uses: actions/upload-artifact@v4
        with:
          name: svc-version
          path: |
            version.txt

  build-dev:
    needs: [ artifacts-version ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        envs: [ dev-eu, dev-us, dev-cn ]
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{ secrets.DEV_NEXT_PUBLIC_ENVIRONMENT }}
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: set url variables
        id: devURL
        run: |
          if [ "${{ matrix.envs }}" = "dev-eu" ] || [ "${{ matrix.envs }}" = "dev-us" ]; then
            echo "URL=https://${{ matrix.envs }}-${{ env.DOMAIN }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.envs }}" = "dev-cn" ]; then
            echo "URL=https://dev-${{ env.DOMAIN_CN }}" >> $GITHUB_OUTPUT
          fi
      - name: set CN-only env
        if: matrix.envs == 'dev-cn'
        run: |
          echo "NEXT_PUBLIC_SA_URL=${{ secrets.NEXT_PUBLIC_SA_URL_CN }}" >> "$GITHUB_ENV"
          echo $NEXT_PUBLIC_SA_URL

      - name: verify CN ENV
        run: |
          if [ "${{ env.NEXT_PUBLIC_SA_URL }}" = ${{ secrets.NEXT_PUBLIC_SA_URL_CN }} ]; then
            echo $NEXT_PUBLIC_SA_URL
            echo "Secrets value OK"
          elif [ "${{ env.NEXT_PUBLIC_SA_URL }}" != ${{ secrets.NEXT_PUBLIC_SA_URL_CN }} ]; then
            echo "EU, US"
          fi
          
      - name: Replace 'self_url' on testfile.html
        run: |
          sed -i "s|{{self_url}}|${{ steps.devURL.outputs.URL }}|g" testfile.html
          cat testfile.html
      - name: compression to artifacts
        run: tar -czf html.tar.gz testfile.html
      - name: upload artifact to code action repo
        uses: actions/upload-artifact@v4
        with:
          name: html-${{ matrix.envs }}
          path: |
            ./${{ env.ARTIFACT_NAME }}

  build-stg:
    needs: [ artifacts-version ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        envs: [stg-eu, stg-us]
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{ secrets.STG_NEXT_PUBLIC_ENVIRONMENT }}
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: set url variables
        id: stgURL
        run: |
          if [ "${{ matrix.envs }}" = "stg-eu" ] || [ "${{ matrix.envs }}" = "stg-us" ]; then
            echo "URL=https://${{ matrix.envs }}-${{ env.DOMAIN }}" >> $GITHUB_OUTPUT
          fi
      - name: verify variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL)
          for ENV_VAR in "${ENV_VAR_LIST}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
            else
              echo "read ${ENV_VAR}"
            fi
          done
      - name: Replace 'self_url' on testfile.html
        run: |
          sed -i "s|{{self_url}}|${{ steps.stgURL.outputs.URL }}|g" testfile.html
          cat testfile.html
      - name: compression to artifacts
        run: tar -czf html.tar.gz testfile.html
      - name: upload artifact to code action repo
        uses: actions/upload-artifact@v4
        with:
          name: html-${{ matrix.envs }}
          path: |
            ./${{ env.ARTIFACT_NAME }}

  build-prd:
    needs: [ artifacts-version ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        envs: [prd, prd-cn]
    env:
      NEXT_PUBLIC_ENVIRONMENT: ${{ secrets.PRD_NEXT_PUBLIC_ENVIRONMENT }}
      NEXT_PUBLIC_SA_URL: ${{ secrets.NEXT_PUBLIC_SA_URL_CN }}
    steps:
      - name: checkout
        uses: actions/checkout@v5
      - name: set url variables
        id: prdURL
        run: |
          if [ "${{ matrix.envs }}" = "prd" ]; then
            echo "URL=https://${{ env.DOMAIN }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.envs }}" = "prd-cn" ]; then
            echo "URL=https://${{ env.DOMAIN_CN }}" >> $GITHUB_OUTPUT
          fi
      - name: verify variables
        run: |
          ENV_VAR_LIST=(NEXT_PUBLIC_ENVIRONMENT NEXT_PUBLIC_SA_URL)
          for ENV_VAR in "${ENV_VAR_LIST}"
          do
            echo '::'_${ENV_VAR}
            if [ -z "${!ENV_VAR}" ]; then
              echo "${ENV_VAR} is empty"
            else
              echo "read ${ENV_VAR}"
            fi
          done
      - name: Replace 'self_url' on testfile.html
        run: |
          sed -i "s|{{self_url}}|${{ steps.prdURL.outputs.URL }}|g" testfile.html
          cat testfile.html
      - name: compression to artifacts
        run: tar -czf html.tar.gz testfile.html
      - name: upload artifact to code action repo
        uses: actions/upload-artifact@v4
        with:
          name: html-${{ matrix.envs }}
          path: |
            ./${{ env.ARTIFACT_NAME }}

  deploy:
    needs: [ build-dev, build-stg, build-prd ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        envs: [dev, stg, prd] #[dev-eu, dev-us, dev-cn, stg-eu, stg-us, prd, prd-cn]
    steps:
      - name: checkout
        uses: actions/checkout@v5

      # - name: Download TAR artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: html-${{ matrix.envs }}
      #     path: |
      #       ./artifacts

      - name: Download artifact version
        uses: actions/download-artifact@v4
        with:
          name: svc-version
          path: |
            ./artifacts

      - name: Set aws variables # AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, ECR_REPOSITORY, ECR_REGISTRY
        run: |
          ENV="${{ matrix.envs }}"
          echo AWS_ACCESS_KEY_ID="${{ secrets.STG_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo AWS_SECRET_ACCESS_KEY="${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo ECR_REPOSITORY="fmm-web-hnd/${{ matrix.envs }}" >> "$GITHUB_ENV"
          echo AWS_REGION="ap-northeast-2" >> "$GITHUB_ENV"

          # # 에러 발생 시 즉시 중단
          # set -euo pipefail

          # ENV="${{ matrix.envs }}"

          # case "$ENV" in
          #   dev-*)
          #     echo AWS_ACCESS_KEY_ID="${{ secrets.STG_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          #     echo AWS_SECRET_ACCESS_KEY="${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          #     echo ECR_REPOSITORY="fmm-web-hnd/dev" >> "$GITHUB_ENV"
          #     case "$ENV" in
          #       dev-eu) echo AWS_REGION="eu-west-1" >> "$GITHUB_ENV" ;;
          #       dev-us) echo AWS_REGION="us-west-2" >> "$GITHUB_ENV" ;;
          #       dev-cn) echo AWS_REGION="ap-southeast-1" >> "$GITHUB_ENV" ;;
          #     esac
          #     ;;

          #   stg-*)
          #     echo AWS_ACCESS_KEY_ID="${{ secrets.STG_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          #     echo AWS_SECRET_ACCESS_KEY="${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          #     echo ECR_REPOSITORY="fmm-web-hnd/stg" >> "$GITHUB_ENV"
          #     case "$ENV" in
          #       stg-eu) echo AWS_REGION="eu-west-1" >> "$GITHUB_ENV" ;;
          #       stg-us) echo AWS_REGION="us-west-2" >> "$GITHUB_ENV" ;;
          #     esac
          #     ;;

          #   prd)
          #     echo AWS_ACCESS_KEY_ID="${{ secrets.PRD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          #     echo AWS_SECRET_ACCESS_KEY="${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          #     echo ECR_REPOSITORY="fmm-web-hnd" >> "$GITHUB_ENV"
          #     echo AWS_REGION="eu-west-1" >> "$GITHUB_ENV"
          #     ;;

          #   prd-cn)
          #     echo AWS_ACCESS_KEY_ID="${{ secrets.PRD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          #     echo AWS_SECRET_ACCESS_KEY="${{ secrets.PRD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          #     echo ECR_REPOSITORY="fmm-web-hnd" >> "$GITHUB_ENV"
          #     echo AWS_REGION="ap-southeast-1" >> "$GITHUB_ENV"
          #     ;;

          #   *)
          #     echo "Unknown matrix.envs: $ENV" >&2
          #     exit 1
          #     ;;
          # esac

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.AWS_REGION }}

          export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"
          export ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"

          echo ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> "$GITHUB_ENV"

          echo "Resolved: ENV=$ENV, REGION=$AWS_REGION, REGISTRY=$ECR_REGISTRY, REPO=$ECR_REPOSITORY"

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build docker image
        run: |
          echo "Build docker image"
          IMAGE_TAG=$(cat ./artifacts/version.txt)
          echo "Using version: $IMAGE_TAG"
          
          npm install

          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG --label fmm=hnd .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "Image pushed: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

      - name: CleanUp docker images & cache
        if: always()
        run: |
          echo "Before prune:"; docker system df
          echo ""
          echo "Image label=fmm=hnd:";
          docker images --filter "label=fmm=hnd" \
            --format 'table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedSince}}\t{{.Size}}\t{{ index .Labels "fmm" }}'
          echo ""
          echo "Docker images list:"
          echo "docker image ls"
          # docker image prune -af --filter "label=fmm=hnd" --filter "until=168h"
          # echo "After prune:"; docker system df

  update-helm:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact version
        uses: actions/download-artifact@v4
        with:
          name: svc-version
          path: |
            ./artifacts